


	
		;********************************************************
		;* 		SMALL PART     LINE 10		        *
		;*			TESTMARK			*
		;*							*
		;*		     MAIN MODULE 			*
		;*							*
		;*		CTC INITIALIZATION			*
		;*		SIO INITIALIZATION			*
		;*		INTERRUPT JUMP TABLE			*
		;*		CPU LOST ROUTINE			*
		;*		BASE PROGRAM				*
		;********************************************************


	NAME	TESTMARK

	PUBLIC	CURCNT,MEMCNT,STOPCNT,TESTCNT,PARTCNT,KICKCNT,JOGCNT
	PUBLIC	BOWLCNT,ESICNT,OUTCNT,SHIFT1,SHIFT2,MCRCNT,PORT06
	PUBLIC	STPREG,TIMEREG,CALREG,REG1,REG2,ERRREG,ESIRLY,RUNREG
	PUBLIC	ESIDWN,BOWLDWN,OUTDWN,PORT04,AIRDWN,MCRDWN,SLOWDWN
	PUBLIC	SLOWCNT,OVENTME,OVENDWN,AIRCNT,BEEPCNT


	EXTRN	SIOI,VAL1,VAL2,PULSE,UPDATE,CHREC,VAL10,DISINIT

	ORG	0000H
	JP	ONWARD


		;********************************************************
		;*	THE FOLLOWING PROGRAMING STEPS WILL BE JUMPED	*
		;*  TO IF THE CPU BECOMES LOST AND JUMPS TO A LOCATION	*
		;*  OUTSIDE OF THE PROGRAM.  				*
		;*  	THE RAM (LOCATIONS A000H TO BFFFH) IS FILLED	*
		;*  WITH FFH'S.  WHEN THE CPU FINDS A FFH IT JUMPS TO	*
		;*  LOCATION 38H.  THE OPERATIONS OF THE MACHINE WILL	*
		;*  BE TERMINATED, AN ERROR BIT SET, AND THE CPU WILL	*
		;*  BE HALTED.						*
		;********************************************************

	ORG	0038H
	NOP			;LOST ROUTINE
	DI			;DISABLE THE INTERRUPTS
	LD	A,00H		;CLEAR THE ACCUMULATOR
	OUT	06H,A		;PORT CONTROLLING THE MOTION OUTPUTS
	LD	(PORT06),A	;CLEAR THE MIRROR REGISTER
	IN	A,01H		
	SET	7,A		;TURN ON THE ERROR LIGHT
	OUT	01H,A
	LD	A,(ERRREG)
	SET	1,A		;SET A BIT IN AN ERROR REGISTER INDICATING
	LD	(ERRREG),A	;THE CPU IS LOST.
	HALT

	
		;********************************************************
		;*	THE FOLLOWING WORD DEFINITIONS ARE USED AS A	*
		;*  JUMP TABLE FOR THE INTERRUPT VECTORS OF THE CTC.	*
		;*  IF A PULSE IS FOUND CHANNEL 1 OF THE CTC WILL BE	*
		;*  ACTIVE AND THE PROGRAM COUNTER WILL VECTOR TO THE	*
		;*  PULSE MODULE TO VERIFY THE COUNT THE PULSE AND 	*
		;*  PERFORM ANY NECESSARY TASK.				*
		;********************************************************


	ORG	0062H
CTC1:	DEFW	PULSE		;JUMP TABLES FOR INTERRUPT ROUTINES
CTC2:	DEFW	UPDATE		


		;********************************************************
		;*	THIS PART OF THE INITIALIZATION GIVES RAM 	*
		;*  LOCATIONS TO VARIOUS STORAGE REGISTERS IN THE 	*
		;*  PROGRAM.  THESE LOCATIONS ARE ACCESSABLE BY THE TT5	*
		;********************************************************


RAM0	EQU	0A000H		;ADDRESS EQUATE LOCATIONS
CURCNT	EQU	RAM0+04H	;LOCATION FOR CURRENT COUNT OF PULSE
MEMCNT	EQU	RAM0+02H	;LOCATION FOR LAST FORWARD COUNT 
RUNREG	EQU	RAM0+1EH	;LOCATION FOR RUNMODE CONDITION BITS
STOPCNT	EQU	RAM0+0CH	;LOCATION FOR STOP COUNT LOCATION.
TESTCNT	EQU	RAM0+06H	;LOCATION FOR TEST TIME LOCATION.
PARTCNT	EQU	RAM0+08H	;LOCATION FOR PART CONFORMATION LOCATION.
KICKCNT	EQU	RAM0+0AH	;LOCATION FOR PART EJECT LOCATION.
JOGCNT	EQU	RAM0+1CH	;LOCATION FOR STPSET BIT TO SET IN JOG MODE.
STPREG	EQU	RAM0+24H	;LOCATION FOR STOP CONDITION BITS.
TIMEREG	EQU	RAM0+22H	;LOCATION FOR PULSE TIME CONDITION BITS.
CALREG	EQU	RAM0+20H	;LOCATION FOR CALIBRATION MODE CONDITION BITS.
REG1	EQU	RAM0+26H	;LOCATION FOR CONDITION BITS.
REG2	EQU	RAM0+28H	;LOCATION FOR CONDITION BITS.
ERRREG	EQU	RAM0+2AH	;LOCATION FOR ERROR REGISTER IDENTIFICATION.
ESIRLY	EQU	RAM0+2CH	;LOCATION FOR ERROR REGISTER IDENTIFICATION.
BOWLCNT	EQU	RAM0+10H	;LOCATION FOR THE 10mS SYNTRON BOWL COUNT
ESICNT	EQU	RAM0+14H	;LOCATION FOR THE 10mS TEST COUNT
OUTCNT	EQU	RAM0+12H	;LOCATION FOR THE 10mS EJECT COUNT
SHIFT1	EQU	RAM0+2EH	;LOCATION FOR THE FIRST SHIFT REGISTER.
SHIFT2	EQU	RAM0+30H	;LOCATION FOR THE SECOND SHIFT REGISTER.
MCRCNT	EQU	RAM0+16H	;LOCATION FOR MCR 10mS DISABLE COUNT STORAGE.
PORT06	EQU	RAM0+40H	;LOCATION FOR PORT INFORMATION ON 06H.
ESIDWN	EQU	RAM0+36H	;LOCATION FOR BRIDGE TEST LENGTH
OUTDWN	EQU	RAM0+34H	;LOCATION FOR KICKOUT LENGTH
BOWLDWN	EQU	RAM0+32H	;LOCATION FOR SYNTRON OPERATE TIME
PORT04	EQU	RAM0+42H	;LOCATION FOR PORT INFORMATION ON 04H.
AIRDWN	EQU	RAM0+3EH	;LOCATION FOR AIR PRESSURE DELAY COUNT.
MCRDWN	EQU	RAM0+38H	;LOCATION FOR MCR MECHANICAL DELAY TIME.
SLOWCNT	EQU	RAM0+18H	;LOCATION FOR THE PULSE AUTO OVEN OFF VALUE
SLOWDWN	EQU	RAM0+3AH	;LOCATION FOR OVEN DECREMENT COUNT.
OVENTME	EQU	RAM0+1AH	;LOCATION FOR THE 10mS OVEN AUTO OFF TIME
OVENDWN	EQU	RAM0+3CH	;LOCATION FOR THE 10mS DECTREMENT COUNT.
AIRCNT	EQU	RAM0+0EH	;LOCATION FOR THE AIR PRESSURE DELAY TIME
BEEPCNT	EQU	RAM0+44H	;LOCATION FOR THE BEEPER ON COUNT

		;NOTE*NOTE*NOTE*NOTE*NOTE*NOTE*NOTE*NOTE*NOTE*NOTE*NOTE*
		;NOTE*						  *NOTE*
		;NOTE*	THE TT5 MODULE  TT5COMM  HAS BEEN GIVEN   *NOTE*
		;NOTE*  RAM MEMORY LOCATION A100H THROUGH A150H   *NOTE*
		;NOTE*     IF ANY FUTHER CHANGES ARE MADE TO THIS *NOTE*
		;NOTE*  PROGRAM THAT REQUIRE MORE RAM MEMORY 	  *NOTE*
		;NOTE*  SPACE,  THE RAM LOCATIONS FOR THE TT5COMM *NOTE*
		;NOTE*  MODULE SHOULD BE MOVED UP RESPECTIVELY.   *NOTE*
		;NOTE*						  *NOTE*
		;NOTE*NOTE*NOTE*NOTE*NOTE*NOTE*NOTE*NOTE*NOTE*NOTE*NOTE*


		;*******************************************************
		;  THE FOLLOWING ARE FLAG REGISTERS WITH A DESCRIPTION
		;     		OF EACH OF THERE FLAGS

		;RUNREG
		;7=PART EJECT REQUEST
		;6=PART PRESENT CONFIRMED
		;5=PART PRESENT WAS TESTED FOR
		;4=BITS IN THE SHIFT REGISTERS WERE SHIFTED
		;3=PART WAS TESTED
		;2=REQUEST TO TAKE A TEST
		;1=JOG REQUEST
		;0=START REQUEST

		;STPREG
		;7=STOP REQUEST HAS BEEN CONFIRMED
		;6=
		;5=
		;4=
		;3=
		;2=DOOR OPEN STOP REQUEST
		;1=
		;0=STOP BUTTON STOP REQUEST

		;TIMEREG
		;7=SET UP MODE IS ACTIVE
		;6=EXITTING THE SET UP MODE
		;5=
		;4=
		;3=AIR DELAY HAS BEEN COMPLETED
		;2=AIR DELAY IS IN PROGRESS
		;1=PARTS ARE LOW IN THE SYNTRON BOWL(HISTORY FLAG CONFIRMED)
		;0=PART IS BEING EJECTED

		;CALREG
		;7=CALIBRATION PROCESS HAS BEEN COMPLETED
		;6=
		;5=
		;4=CALIBRATION STOP REQUEST IS SET
		;3=
		;2=MACHINE IS CURRENTLY BEING CALIBRATED
		;1=THERE IS A CALIBRATE REQUEST
		;0=MACHINE IS IN THE CALIBTATION PROCESS

		;REG1
		;7=THE TONE HAS ALREADY SOUNDED DURING THIS END OF ORDER REQ.
		;6=TONE REQUEST
		;5=END OF ORDER REQUEST
		;4=
		;3=ENCODER REVERSE MEMORY FLAG
		;2=MACHINE IS IN JOG MODE
		;1=MACHINE IS IN RUN MODE
		;0=EMERGENCY STOP OCCURED
	
		;REG2
		;7=
		;6=
		;5=LOAD CHUTE POSITION FLAG
		;4=CHAIN LOAD DISABLE FLAG
		;3=MASTER CONTROL RELAY IS BEING DISABLED
		;2=RIFFLE RACK LOW PART HISTORY FLAG
		;1=SYNTRON BOWL PROHIBIT FLAG
		;0=

		;ERRREG
		;7=
		;6=
		;5=
		;4=
		;3=
		;2=
		;1=PROGRAM IS LOST  CPU HAS BEEN HALTED
		;0=MASTER CONTROL RELAY FAULT (NOT USED)
	
		;ESIRLY
		;7=PART GOOD BUT NOT PRESENT (PART CURRENTLY EJECTED INSTEAD)
		;6=
		;5=
		;4=COMPARATOR SHOWS BOTH HIGH AND LOW PART
		;3=COMPARATOR HAS NO RELAYS CLOSED
		;2=COMPARATOR HAS ALL RELAYS CLOSED
		;1=COMPARATOR SHOWS BOTH GOOD AND HIGH PART
		;0=COMPARATOR SHOWS BOTH GOOD AND LOW PART

		;*******************************************************
		;*	THIS PART OF THE PROGRAM INITIALIZES THE STACK *
		;*  POINTER, COUNTER TIMER CIRCUIT, SERIAL I/O CIRCUIT *
		;*  AND CLEARS THE CONTENTS OF VARIOUS STORAGE         *
		;*  REGISTERS BEFORE THE PROGRAM IS ENTERED.           *
		;*     	IT ALSO LOADS THE TT5 ENTERED VALUES INTO      *
		;*  LOCATIONS THAT ARE USED IN THE PROGRAM.	       *
		;*******************************************************



	ORG	0100H
ONWARD:	LD	SP,0BFFFH	;SET THE STACK POINTER LOCATION.
	CALL	CTCGO		;INITIALIZE THE COUNTER TIMER CIRCUIT
	CALL	SIOI		;INITIALIZE THE SERIAL I/O CIRCUIT
	XOR	A		;CLEAR THE ACCUMULATOR
	OUT 	00H,A		;CLEAR THE I/O PORTS
	OUT	02H,A
	OUT	05H,A

	LD	A,80H		;SET BIT 7 TO TURN ON THE OPTO-22 MODULE
	OUT	06H,A		;TO ALLOW THE MCR TO BE ENABLED.
	OUT	04H,A		;SET THE N.O. BIT  RESET THE COMM2 BIT

	LD	A,20H
	OUT	01H,A		;CLEAR I/O PORT, SET BEEPER OFF AND ERROR OFF
			
				;**THE FOLLOWING VALUES ARE LOCATIONS AND
				;**VALUES TO OPERATE THE MACHINE.  THEY
				;**CONSIST OF ENCODER LOCATION COUNTS    **
				;**AND TIME VALUES FOR THE TIMER MODULE  **
				;**IF CHANGES ARE TO BE MADE, THIS IS    **
				;**WHERE TO MAKE THE CHANGES.
	IN	A,00H
	BIT	2,A		;IS THE START PRESSED
	JP	Z,NOREGO
	BIT	3,A		;IS THE STOP PRESSED
	JP	Z,NOREGO
	LD	A,50H		
	LD	(0A00CH),A	;STOP LOCATION
	LD	A,01H
	LD	(0A00DH),A	
	LD	A,8DH
	LD	(0A006H),A	;TEST LOCATION
	LD	A,00H		
	LD	(0A007H),A
	LD	A,20H		;WHERE TO CHECK IF THE PART IS PRESENT
	LD	(0A008H),A
	LD	A,01H
	LD	(0A009H),A
	LD	A,0D0H		;WHERE TO KICK OUT A BAD PART
	LD	(0A00AH),A
	LD	A,00H
	LD	(0A00BH),A
	LD	A,80H		;HOW LONG THE SYNTRON BOWL IS TO RUN
	LD	(0A010H),A	
	LD	A,01H
	LD	(0A011H),A	
	LD	A,30H		;HOW LONG FOR THE ESI TO TAKE A TEST
	LD	(0A014H),A	
	LD	A,00H
	LD	(0A015H),A	
	LD	A,05H		;HOW LONG SHOULD THE KICKOUT STAY OUT
	LD	(0A012H),A	
	LD	A,00H
	LD	(0A013H),A	
	LD	A,02H		;HOW LONG TO KEEP THE MCR DE-ENERGIZED
	LD	(0A016H),A
	LD	A,00H
	LD	(0A017H),A	
	LD	A,10H		;PULSE COUNT FOR THE AUTO OVEN OFF ROUTINE
	LD	(0A018H),A
	LD	A,00H
	LD	(0A019H),A
	LD	A,0C0H		;10mS AUTO OVEN OFF DELAY COUNT
	LD	(0A01AH),A
	LD	A,00H
	LD	(0A01BH),A
	LD	A,10H		;THE AIR DELAY COUNT VARIABLE
	LD	(0A00EH),A
	LD	A,00H
	LD	(0A00FH),A
NOREGO:	NOP

	LD	HL,(STOPCNT)
	LD	DE,0010H
	SBC	HL,DE		;SET THE JOG FLAG SET LOCATION JUST BEFORE
	LD	(JOGCNT),HL	;THE STOP LOCATION

				;****************************




	XOR	A
	LD	(VAL1),A	;CLEAR THE MEMORY LOCATION
	LD	(VAL2),A	;   "
	LD	(VAL10),A	;   "
	LD	(RUNREG),A	;   "
	LD	(STPREG),A	;   "
	LD	(TIMEREG),A	;   "
	LD	(CALREG),A	;   "
	LD	(REG1),A	;   "
	LD	(REG2),A	;   "
	LD	(ERRREG),A	;   "
	LD	(ESIRLY),A	;   "
	LD	A,0FFH		;SET ALL THE PARTS IN THE REGISTERS BAD
	LD	(SHIFT1),A	;   "
	LD	(SHIFT2),A	;   "		
	LD	A,80H		;LOAD THE MIRROR REGISTER WITH MCR ENABLE
	LD	(PORT06),A	;   "	
	LD	(PORT04),A
	LD	HL,0000H	;   "
	LD	(CURCNT),HL	;CLEAR THE COUNT REGISTER.
	LD	(MEMCNT),HL	;   "
	CALL	DISINIT		;INITIALIZE THE DISPLAY REGISTER


	IN	A,00H
	BIT	6,A		;IS THE LOAD CHUTE IN POSITION
	JP	Z,BEGIN
	LD	A,(PORT06)
	SET	2,A		;IF SO TURN ON THE VIBRATOR
	OUT	06H,A
	LD	(PORT06),A


		;****************************************************************
		;*	THIS PART OF THE MAIN PROGRAM CHECKS THE STATE OF	*
		;* CALIBRATION, CONFIRMS STOP REQUESTS, AND REQUESTS TO START	*
		;* THE MACHINE IN JOG,CALIBRATE, OR RUN MODES.			*
		;*	IF THE MACHINE HAS NOT BEEN ENABLED, A LOOP WILL BE	*
		;* ENTERED THAT WILL ALLOW NOTHING ELSE TO OCCUR UNTIL THE	*
		;* MASTER CONTROL RELAY IS ENABLED.				*
		;*	IF THE MACHINE HAS NOT BEEN CALIBRATED, A LOOP WILL	*
		;* BE ENTERED THAT WILL NOT ALLOW ANY OTHER PROCESS TO BE	*
		;* ACCESSED UNTIL A COMPLETE CALIBRATE CYCLE HAS BEEN COMPLETE	*
		;*	IF THE MACHINE IS CALIBRATED BUT IS NOT CURRENTLY 	*
		;* RUNNING THEN THE REQUESTS FOR A START, JOG, OR RECALIBRATE	*
		;* WILL BE CONFIRMED AND STARTED.				*
		;*	IF THE MACHINE IS ALREADY RUNNING, REQUESTS FOR A	*
		;* STOP FROM A END OF ORDER, PRINTER DOOR OPEN, OR STOP		*
		;* REQUEST WILL BE VERIFIED AND A BIT WILL BE SET FOR THE 	*
		;* STOPTIME CHECK IN THE PULSE MODULE.				*
		;*	A ROUTINE IS CALLED IF THE MACHING IS RUNNING		*
		;* (HIGOLO) TO CHECK IF A TEST HAS BEEN COMPLETED, AND		*
		;* IF SO IT WILL SEE IF THE PART TESTED WAS GOOD OR BAD AND 	*
		;* WILL SET A BIT IN THE PART SHIFT REGISTER ACCORDINGLY.	*
		;*	AT THE END OF A FULL PROCESS A JUMP WILL OCCUR		*
		;* TO GO BACK TO THE BEGINNING TO CHECK ALL OF THE INFORMATION	*
		;* AGAIN.  							*
		;****************************************************************


BEGIN:	EI			;ENABLE THE INTERUPTS
	IN	A,05H		;IS THE MASTER CONTROL RELAY ENABLED?
	BIT	7,A		
	JP 	Z,BEGIN		;IF IT ISN'T THEN WAIT FOR IT TO BE ENABLED.
	LD	A,(REG1)
	BIT	1,A		;IS THE MACHINE RUNNING?
	JP	NZ,GO		;IF IT IS THEN JUMP TO CHECK STOP REGISTER.
	LD	A,(CALREG)	
	BIT	7,A		;HAVE WE CALIBRATED THE MACHINE ALREADY?
	JP	Z,LOCAL		;IF NOT JUMP TO SEE IF WE ARE CALIBRATING NOW.
	CALL	NEEDGO		;IF NOT THEN CHECK FOR OTHER GO REQUESTS.
	JP	BEGIN

CALCAL:	CALL	CALIB		;GO TO CALIBRATION PROCESS.
	JP	BEGIN

LOCAL:	LD	A,(CALREG)	;ARE WE CALIBRATING THE EQUIPMENT CURRENTLY?
	BIT	2,A
	JP	NZ,BEGIN	;IF SO THEN JUMP BACK TO BEGINNING.
	LD	A,(CALREG)	;ARE WE IN THE CALIBRATION PROCESS AND
	BIT	4,A		;WAITING FOR THE STOP POSITION?
	JP	NZ,BEGIN	;IF WE ARE THEN GO BACK TO BEGINNING.
	LD	A,(CALREG)	
	BIT	1,A		;HAS CALIBRATION JUST BEEN REQUESTED?
	JP	Z,BEGIN		;IF NOT THEN JUMP BACK TO BEGINNING.
	JP	CALCAL		;IF THE CALIBRATION IS REQUESTED GO DO IT.


GO:	LD	A,(STPREG)	
	BIT	7,A		;ARE WE REQUESTING A STOP?
	JP	NZ,LOHI		;IF SO, SEE IF IT IS TIME TO SHIFT THE BITS.
	CALL	NEEDSTP		;SEE IF ANY STOP REQUESTS ARE REQUIRED.
LOHI:	CALL	HIGOLO		;SEE IF IT IS TIME TO SHIFT THE PART BITS.
	JP	BEGIN		;RETURN TO THE BEGINNING.


		;--------------------------------------------------------
		;|	THIS CALLED ROUTINE CHECKS THE STOP REQUESTS	|
		;|  AND IF THE CONDITION INPUT IS STILL ACTIVE IT 	|
		;|  WILL REQUEST A STOP TO OCCUR.  IF THE CONDITION	|
		;|  INPUT IS NOT STILL ACTIVE IT WILL RESET THE REQUEST |
		;|  AND RETURN TO THE MAIN PROGRAM.			|
		;|      THE FIRST PART OF THE ROUTINE WILL CHECK THE 	|
		;|  END OF ORDER REQUEST FLAG AND IF STILL REQUESTED 	|
		;|  WILL TURN ON THE BEEPER AND LOAD THE COUNT VALUE	|
		;|  FOR THE BEEPER TO BE ON.  THERE IS A CHECK FOR THE	|
		;|  ERROR LIGHT.  SINCE THIS PORT IS USED FOR BOTH AN	|
		;|  INPUT AND OUTPUT PORT ALL THE BITS THAT ARE USED FOR|
		;|  JUST INPUTS MUST BE LEFT FLOATING BY PUTTING OUT	|
		;|  ZEROS TO THOSE BITS.  IF THE ERROR LIGHT IS ON IT 	|
		;|  MUST BE SENT A BIT TO LEAVE IT TURNED ON.
		;--------------------------------------------------------

NEEDSTP:LD	A,(REG1)
	BIT	6,A		;CHECK IF THE BEEP PROCESS FLAG IS SET
	JP	NZ,DOOROP

	LD	A,(REG1)
	BIT	5,A		;CHECK IF AN END OF ORDER HAS BEEN REQUESTED
	JP	Z,DOOROP	;IF NOT THEN CHECK THE DOOR OPEN BIT.

	IN	A,00H
	BIT	5,A		;CHECK IF THE END OF ORDER IS STILL REQUESTED
	JP	Z,EOORES	;IF IT IS NOT THEN RESET THE REQUEST

	IN	A,01H		;CHECK IF THE ERROR LIGHT IS ON
	BIT	7,A
	JP	NZ,ERRLIT

	LD	A,00H		;TURN ON THE BEEPER WITHOUT TURNING ON THE
	OUT	01H,A		;ERROR LIGHT OR SETTING ANY INPUTS
	JP	BEEPFLG

ERRLIT:	LD	A,80H		;TURN ON THE BEEPER AND THE ERROR LIGHT SINCE
	OUT	01H,A		;IT WAS ON WHEN WE CHECKED THE E.O.O. REQUEST

BEEPFLG:LD	A,(REG1)
	SET	6,A		;SET THE BEEP PROCESS FLAG FOR THE 10mS SUB.
	RES	5,A		;RESET THE END OF ORDER REQUEST FLAG
	LD	(REG1),A

	LD	A,64H		;LOAD THE BEEP ON COUNT TIME VALUE
	LD	(BEEPCNT),A
	JP	DOOROP

EOORES:	LD	A,(REG1)
	RES	5,A		;RESET THE END OF ORDER REQUEST 
	LD	(REG1),A

DOOROP:	LD	A,(STPREG)
	BIT	2,A		;CHECK THE PRINTER DOOR IS OPEN REQUEST STOP
	JP 	Z,STOPEM	;IF NOT THEN CHECK THE STOP REQUEST BIT
	LD	A,(TIMEREG)
	BIT	7,A		;IF THE SET UP MODE ACTIVE RESET REQUEST
	JP	NZ,OPDOOR
	IN	A,00H
	BIT	7,A		;CHECK IF THE DOOR IS STILL OPEN
	JP	NZ,SETSTP	;IF IT IS THEN SET THE STOP REQUEST FLAG.
OPDOOR:	LD	A,(STPREG)	
	RES	2,A		;IF NOT THEN RESET THE DOOR OPEN REQUEST
	LD	(STPREG),A
STOPEM:	LD	A,(STPREG)
	BIT	0,A		;CHECK IF THE STOP REQUEST FLAG IS SET
	RET	Z		;IF NOT THEN RETURN TO THE MAIN PROGRAM
	IN	A,00H
	BIT	3,A		;SEE IF THE CONDITION INPUT IS STILL SET
	JP	NZ,SETSTP	;IF IT IS THEN SET THE STOP REQUEST FLAG
	LD	A,(STPREG)
	RES	0,A		;IF NOT RESET THE STOP REQUEST FLAG
	LD	(STPREG),A
	RET
SETSTP:	LD	A,(STPREG)
	SET	7,A		;SET THE STOP FLAG FOR THE PULSE ROUTINE
	LD	(STPREG),A
	RET



		;--------------------------------------------------------
		;|	THIS CALLED ROUTINE CHECKS THE START AND JOG	|
		;|  REQUESTS.  IF THEY ARE SET IT WILL CHECK IF THE 	|
		;|  INPUTS ARE STILL ACTIVE.  IF THEY ARE THE RESPECTIVE|
		;|  ROUTINE IS CALLED.  IF THEY ARE NOT STILL ACTIVE	|
		;|  THE REQUEST FLAG WILL BE RESET AND THE MAIN PROGRAM	|
		;|  WILL BE RETURNED TO.				|
		;--------------------------------------------------------

NEEDGO:	LD	A,(RUNREG)	;CHECK IF THERE IS A START REQUEST
	BIT	0,A
	JP	Z,GOJOG
	IN	A,00H
	BIT	2,A		;IS IT STILL PRESENT
	JP	Z,NOSTAR	;IF NOT JUMP TO RESET THE START REQUEST FLAG
	CALL	START
	RET
NOSTAR:	LD	A,(RUNREG)
	RES	0,A
	LD	(RUNREG),A
GOJOG:	LD	A,(RUNREG)
	BIT	1,A		;CHECK IF THERE HAS BEEN A JOG REQUEST
	RET	Z
	IN	A,00H
	BIT	1,A		;CHECK IF THE REQUEST IS STILL PRESENT
	JP	Z,NOJOG
	CALL	JOG
	RET
NOJOG:	LD	A,(RUNREG)
	RES	1,A		;IF NOT RESET THE JOG REQUEST
	LD	(RUNREG),A
	RET



		;--------------------------------------------------------
		;|	THIS CALLED SUBROUTINE IS THE CALIBRATE ROUTINE.|
		;|  IT MUST BE REQUESTED WHEN THE MACHINE IS POWERED  	|
		;|  UP TO SET THE ZERO LOCATION THAT THE PULSE ROUTINES |
		;|  USE AS A REFERENCE.  THIS WILL BE DONE BY STARTING  |
		;|  THE MOTOR AND THEN WATCHING FOR THE INDEX PULSE FROM|
		;|  THE ENCODER.  WHEN THE PULSE IS FOUND IT SETS THE 	|
		;|  CURRENT COUNT REGISTER TO ZERO AND SETS A CALIBRATE |
		;|  STOP REQUEST FLAG.  THE MOTOR WILL CONTINUE TO RUN  |
		;|  UNTIL THE STOP LOCATION IS FOUND.			|
		;--------------------------------------------------------


CALIB:	LD	A,(REG1)
	BIT	0,A		;DID A MCR DISABLE OCCUR
	JP	Z,OCALIB
	LD	A,0FFH
	LD	(SHIFT1),A	;SET THE SHIFT REGISTERS AS BAD PARTS
	LD	(SHIFT2),A
OCALIB:	LD	A,(ESIRLY)	;CHECK TO SEE IF ANY ERROR FLAGS ARE SET
	CP	00H
	RET	NZ		;RETURN IF ANY ESI ERRORS ARE SET
	LD 	A,(ERRREG)
	CP	00H		
	RET	NZ		;RETURN IF ANY OTHER ERRORS ARE SET
	LD 	A,(CALREG)	
	SET	2,A		;SET THE *ARE CALIBRATING* FLAG
	LD	(CALREG),A
	LD	A,(CALREG)
	RES	1,A		;RESET THE CALIBRATION REFQUEST FLAG
	LD	(CALREG),A
	LD	A,(PORT06)
	SET	1,A		;TURN ON THE LOAD DISABLE SOLENOID
	OUT 	06H,A
	LD	(PORT06),A
	LD	A,(PORT06)
	SET	6,A		;TURN THE DRIVE MOTOR
	OUT	06H,A
	LD	(PORT06),A
	LD	A,0FFH
	LD	(SHIFT1),A	;SET ALL PARTS AS BAD PARTS.
	LD	(SHIFT2),A	
INDEX:	EI
	IN	A,05H		
	BIT	5,A		;THE INDEX POSITION 
	JP	NZ,INDEX
	LD	HL,0000H
	LD	(CURCNT),HL	;CLEAR THE COUNT
	LD	A,(STPREG)
	SET	7,A		;SET THE STOP REQUEST FLAG
	LD	(STPREG),A
	LD	A,(CALREG)
	SET	4,A		;SET THE CALIBRATION STOP REQUEST FLAG.
	LD	(CALREG),A
	LD	A,(CALREG)
	RES	2,A		;RESET THE *ARE CALIBRATING* FLAG
	LD	(CALREG),A
	LD	A,(REG1)
	RES	0,A		;RESET THE E. STOP OCCURED FLAG
	LD	(REG1),A	;(IF IT IS SET OR NOT)
	RET


		;--------------------------------------------------------
		;|	THIS SUBROUTINE WILL PLACE THE MACHINE IN THE	|
		;|  JOG MODE.  IF THE ERROR REGISTERS ARE CLEAR AND THE	|
		;|  MACHINE HAS BEEN CALIBRATED, THE MACHINE WILL RUN	|
		;|  FOR THE DURATION OF ONE PART.			|
		;|      THE CHUTE AND LOAD DISABLE SWITCH ARE CHECKED	|
		;|  TO DETERMINE IF THE SYNTRON BOWL AND/OR RACK 	|
		;|  VIBRATOR SHOULD BE TURNED ON OR NOT.		|
		;| 	THE MOTOR IS TURNED ON AND THE RUNNING FLAG IS 	|
		;|  SET BUT THE OVEN IS NOT TURNED ON FOR THE ONE PART.	|
		;|  A JOGGING FLAG IS SET SO THAT AFTER THE PROCESS	|
		;|  IS STARTED A LOCATION IS REACHED WHERE THE STOP 	|
		;|  FLAG CAN BE SET.  THIS STOP FLAG WILL STOP THE 	|
		;|  PROCESS  IN THE PULSE MODULE AT THE STOP LOCATION.	|
		;--------------------------------------------------------


JOG:	LD	A,(ESIRLY)
	CP	00H		;CHECK IF ANY ESI RELAY ERRORS.
	RET	NZ		;IF SO RETURN TO MAIN.
	LD	A,(ERRREG)
	CP	00H		;CHECK IF ANY OTHER ERRORS.
	RET	NZ		;IF SO RETURN TO MAIN.
	LD	A,(CALREG)
	BIT	7,A		;CHECK IF MACHINE HAS BEEN CALIBRATED.
	RET	Z		;IF NOT RETURN TO MAIN * NO START ALLOWED
	LD	A,(PORT06)
	SET	6,A		;TURN ON THE MOTOR.
	OUT	06H,A
	LD	(PORT06),A	;STORE THE INFORMATION IN THE MIRROR REG.
	LD	A,(REG1)
	SET	1,A		;SET THE RUNNING FLAG.
	LD	(REG1),A
	LD	A,(REG1)
	SET	2,A		;SET THE JOGGING FLAG.
	LD	(REG1),A
	RET


		;--------------------------------------------------------
		;|	THIS SUBROUTINE WILL PLACE THE MACHINE IN THE 	|
		;|  START MODE.  IF THERE ARE ANY ERRORS THE ROUTINE 	|
		;|  WILL RETURN AND NOT ALLOW THE MACHINE TO RUN.	|
		;|  	THE CALIBRATION FLAG WILL BE CHECKED AND MUST	|
		;|  BE SET TO START THE MACHINE.			|
		;|  	IF THE CHUTE IS OUT OF POSITION AND THE LOAD	|
		;|  DISABLE IS NOT ON, THE ROUTINE WILL RETURN TO THE	|
		;|  MAIN.  IF THE CHUTE IS NOT OUT OF POSITION THE 	|
		;|  RACK VIBRATOR WILL BE TURNED ON AND THE ROUTINE	|
		;|  WILL CONTINUE.  IF THE CHUTE IS OUT OF POSITION  	|
		;|  AND THE LOAD DISABLE IS ACTIVE THE PROGRAM WILL 	|
		;|  CONTINUE ON.  					|
		;|	TO CONTINUE ON,  THE MOTOR IS ENABLED,  THE 	|
		;|  RUNNING FLAG IS SET AND THE OVEN IS TURNED ON.	|
		;--------------------------------------------------------



START:	LD	A,(ESIRLY)
	CP	00H		;CHECK IF THERE ARE ANY ESI RELAY ERRORS.
	RET	NZ		;RETURN IF THERE ARE.
	LD	A,(ERRREG)
	CP	00H		;CHECK IF THERE ARE ANY OTHER ERRORS.
	RET	NZ		;RETURN IF THERE ARE.
	LD	A,(REG1)
	SET	1,A		;SET THE RUNNING FLAG.
	LD	(REG1),A
	LD	A,(PORT06)
	SET 	6,A		;TURN ON THE MOTOR.
	OUT	06H,A
	LD	(PORT06),A
	LD	A,(TIMEREG)	
	BIT	7,A		;IS THE SETUP MODE ACTIVE
	RET	NZ		;IF SO RETURN WITHOUT TURNING ON THE OVEN
	LD	A,(PORT06)
	SET	5,A		;TURN ON THE OVEN
	OUT	06H,A
	LD	(PORT06),A
	LD	HL,(OVENTME)	;LOAD THE OVEN AUTO OFF 10mS TIME VALUE
	LD	(OVENDWN),HL
	LD	HL,0000H	;RESET THE PULSE COUNT
	LD	(SLOWDWN),HL
	RET

		;--------------------------------------------------------
		;|	THIS SUBROUTINE WILL SHIFT THE REGISTERS THAT	|
		;|  CONTAIN THE GOOD-BAD PART INFORMATION.  IT WILL ALSO|
		;|  READ IN THE ESI BRIDGE RELAYS AND RESET THE BIT IF 	|
		;|  THE PART IS GOOD.  IF ANY COMBINATION OF RELAYS ARE	|
		;|  ACTIVE AT THE SAME TIME, AN ERROR FLAG WILL BE SET,	|
		;|  AN ERROR LIGHT WILL BE TURNED ON, THE PART WILL BE 	|
		;|  SET AS BAD, AND THE ROUTINE WILL RETURN TO THE MAIN.|
		;--------------------------------------------------------


HIGOLO:	LD	A,(RUNREG)
	BIT	3,A		;CHECK IF THE TESTED BIT IS SET
	RET	Z		;IF NOT RETURN TO THE MAIN PROGRAM.
	LD	A,(RUNREG)
	BIT	4,A		;CHECK IF THE BITS ARE SHIFTED
	RET	NZ		;IF THE PROCESS HAS BEEN DONE, RETURN.
	LD	A,(SHIFT1)
	SLA	A		;SHIFT THE CONTENTS OF THE FIRST REGISTER.
	LD	(SHIFT1),A
	LD	A,(SHIFT2)
	SLA	A		;SHIFT THE CONTENTS OF THE SECOND REGISTER.
	LD	(SHIFT2),A
	JP	NC,CSHIFT	;IF THE CARRRY FLAG SET JUMP TO SET 
	LD	A,(SHIFT1)
	SET	0,A		;IF THE MSB OF SHIFT2 IS SET, SET THE LSB
	LD	(SHIFT1),A	;OF SHIFT1
CSHIFT:	LD	A,(SHIFT2)
	SET	0,A		;ASSUME BAD PART AND SET BIT 0 AND BAD
	LD	(SHIFT2),A
	LD	A,(TIMEREG)
	BIT	7,A		;IS SETUP MODE FLAG SET
	JP	NZ,GOODRT	;SET FLAGS AND LEAVE ROUTINE
	IN	A,05H
	BIT	0,A		;IS THE ESI GO RELAY CLOSED *PART GOOD*
	JP	Z,BDPART
	LD	A,(SHIFT2)
	RES	0,A		;RESET THE ASSUMED BAD PART BIT TO GOOD
	LD	(SHIFT2),A	
	IN	A,05H
	BIT	2,A		;IS THE PART HI RELAY CLOSED
	JP	NZ,HIGO		;IF IT IS JUMP TO SET ERROR CONDITIONS.
	IN	A,05H
	BIT	1,A		;IS THE ESI PART LOW RELAY CLOSED
	JP	Z,GOODRT	;IF IT IS NOT SET JUMP TO SET COMPLETE BITS
	LD	A,(ESIRLY)	
	SET	0,A		;ERROR BIT STATES BOTH GOOD AND LOW ARE SET.
	LD	(ESIRLY),A
	JP	BADRLY		;JUMP TO SET ERROR FLAGS AND INDICATORS
HIGO:	IN	A,05H
	BIT	1,A		;IS THE ESI PART LO
	JP	Z,GOODHI	;IF NOT, JUMP *BOTH GOOD AND HIGH ARE SET*
	LD	A,(ESIRLY)
	SET	2,A		;SET AN ERROR FLAG *ALL THREE RELAYS CLOSED*
	LD	(ESIRLY),A
	JP	BADRLY
GOODHI:	LD	A,(ESIRLY)
	SET	1,A		;SET A FLAG THAT BOTH *HIGH AND GOOD* ARE SET
	LD	(ESIRLY),A
	JP	BADRLY
BDPART:	IN	A,05H
	BIT	2,A		;WAS THE PART OVER RANGE  *HIGH*
	JP	NZ,HILO		;IF SO, JUMP TO CHECK IF ALSO UNDER RANGE
	IN	A,05H	
	BIT	1,A		;IS PART UNDER RANGE *LOW*
	JP	NZ,GOODRT	;IF SO, SET COMPLETION BITS AND RETURN
	LD	A,(ESIRLY)
	SET	3,A		;SET A BIT IN THE ERROR REGISTER THAT NO
	LD	(ESIRLY),A	;RELAYS WERE CLOSED.
	JP	BADRLY
HILO:	IN	A,05H
	BIT	1,A		;IF THE UNDERRANGE RELAY CLOSED *LOW*
	JP	Z,GOODRT	;IF SO SET COMPLETION BITS AND RETURN.
	LD	A,(ESIRLY)
	SET	4,A		;SET AN ERROR FLAG THAT BOTH HI & LO ARE SET
	LD	(ESIRLY),A
BADRLY:	LD	A,(SHIFT1)
	SET	0,A		;SET THE BAD PART FLAG
	LD	(SHIFT1),A
	LD	A,(STPREG)
	SET	7,A		;SET THE STOP REQUEST FLAG
	LD	(STPREG),A
	IN	A,01H
	SET	7,A		;TURN ON THE ERROR INDICATOR.
	OUT	01H,A
GOODRT:	LD 	A,(RUNREG)
	SET	4,A		;SET THE SHIFTED FLAG
	LD	(RUNREG),A
	LD	A,(RUNREG)
	RES	3,A		;RESET THE TESTED FLAG
	LD	(RUNREG),A
	RET


		;********************************************************
		;*	THIS SUBROUTINE CALLED BY THE INITIALIZATION 	*
		;*  PROCESS WILL INITIALIZE THE COUNTER TIMER CIRCUIT	*
		;*  TO USE CHANNEL 0 TO SET THE COMMUNICATION BAUD RATE,*
		;*  CHANNEL 1 AS THE PULSE ROUTINE INTERUPT, AND CHANNEL*
		;*  2 AS THE 10mS TIMER INTERRUPT.			*
		;********************************************************


CTCGO:	IM 2			;SET INTERRUPT MODE 2
	LD	A,60H		;THIS IS THE INTERRUPT LOW VECTOR BYTE.
	OUT	0F0H,A		;CHANNEL 0 PORT
	LD	A,45H		;NO INT,COUNTER,NEG PULSE
	OUT	0F0H,A		
	LD	A,0C0H		;BAUD RATE COUNT 4800
	OUT	0F0H,A
	LD	A,0D5H		;SET CHANNEL 1 FOR PULSE INTERRUPT
	OUT	0F1H,A		;CHANNEL 1 PORT
	LD	A,01H		;SET COUNT TO 1
	OUT	0F1H,A
	LD	A,0D5H		;SET CHANNEL 2 FOR TIMERS INTERRUPT
	OUT	0F2H,A		;CHANNEL 2 PORT  0D5H
	LD	A,01H		;SET COUNT TO 1
	OUT	0F2H,A
	RET

	END
